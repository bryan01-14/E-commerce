require('dotenv').config();
const mongoose = require('mongoose');
const sheetsService = require('./services/googleSheets');

async function testUniversalSheets() {
  try {
    console.log('üåç Test universel de n\'importe quelle feuille Google Sheets...\n');

    // 1. Connexion MongoDB
    console.log('1Ô∏è‚É£ Test de connexion MongoDB...');
    try {
      await mongoose.connect(process.env.MONGODB_URI);
      console.log('‚úÖ MongoDB connect√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur connexion MongoDB:', error.message);
      return;
    }

    // 2. Initialisation du service
    console.log('\n2Ô∏è‚É£ Initialisation du service Google Sheets...');
    try {
      await sheetsService.initialize();
      console.log('‚úÖ Service Google Sheets initialis√©');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation:', error.message);
      return;
    }

    // 3. R√©cup√©ration de la configuration active
    console.log('\n3Ô∏è‚É£ R√©cup√©ration de la configuration active...');
    let config;
    try {
      config = await sheetsService.getCurrentConfig();
      console.log(`‚úÖ Configuration active: ${config.name}`);
      console.log(`   Spreadsheet ID: ${config.spreadsheetId}`);
      console.log(`   Nom de feuille: "${config.sheetName}"`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la configuration:', error.message);
      return;
    }

    // 4. Test universel avec diff√©rents types de feuilles
    console.log('\n4Ô∏è‚É£ Test universel avec diff√©rents types de feuilles...');
    
    const testSheetNames = [
      'Feuille 1',
      'Feuille 2',
      'Feuille-3',
      '1_Commande',
      'Commandes',
      'Sheet1',
      'Feuille avec espaces',
      'Feuille-avec-tirets',
      'Feuille_avec_underscores',
      'Feuille avec caract√®res sp√©ciaux !@#',
      'Feuille2',
      'Feuille 2',
      'Feuille2 ',
      ' Feuille2',
      'Feuille_2',
      'Feuille-2'
    ];

    let successfulSheets = [];
    let failedSheets = [];

    for (const sheetName of testSheetNames) {
      console.log(`\nüîç Test de la feuille: "${sheetName}"`);
      
      try {
        // Test d'acc√®s
        const accessResult = await sheetsService.testAccess(config.spreadsheetId, sheetName);
        
        if (accessResult.success && accessResult.sheetExists) {
          console.log(`   ‚úÖ Acc√®s r√©ussi`);
          
          // Test de lecture
          try {
            const data = await sheetsService.getData(config.spreadsheetId, sheetName);
            console.log(`   üìñ Lecture r√©ussie: ${data.length} lignes`);
            successfulSheets.push({
              name: sheetName,
              lines: data.length,
              status: 'SUCCESS'
            });
          } catch (readError) {
            console.log(`   ‚ùå Lecture √©chou√©e: ${readError.error || readError.message}`);
            failedSheets.push({
              name: sheetName,
              error: readError.error || readError.message,
              status: 'READ_FAILED'
            });
          }
        } else {
          console.log(`   ‚ö†Ô∏è Feuille non trouv√©e`);
          failedSheets.push({
            name: sheetName,
            error: 'Feuille non trouv√©e',
            status: 'NOT_FOUND'
          });
        }
        
      } catch (accessError) {
        console.log(`   ‚ùå Acc√®s √©chou√©: ${accessError.error || accessError.message}`);
        failedSheets.push({
          name: sheetName,
          error: accessError.error || accessError.message,
          status: 'ACCESS_FAILED'
        });
      }
    }

    // 5. R√©sum√© des tests
    console.log('\nüìã R√©sum√© des tests universels:');
    console.log(`   Feuilles test√©es: ${testSheetNames.length}`);
    console.log(`   Succ√®s: ${successfulSheets.length}`);
    console.log(`   √âchecs: ${failedSheets.length}`);

    if (successfulSheets.length > 0) {
      console.log('\n‚úÖ Feuilles qui fonctionnent:');
      successfulSheets.forEach(sheet => {
        console.log(`   - "${sheet.name}" (${sheet.lines} lignes)`);
      });
    }

    if (failedSheets.length > 0) {
      console.log('\n‚ùå Feuilles qui √©chouent:');
      failedSheets.forEach(sheet => {
        console.log(`   - "${sheet.name}": ${sheet.error}`);
      });
    }

    // 6. Recommandations
    console.log('\nüí° Recommandations:');
    if (successfulSheets.length > 0) {
      console.log('   ‚úÖ Utilisez une des feuilles qui fonctionnent');
      console.log('   üìã Feuilles recommand√©es:', successfulSheets.map(s => s.name).join(', '));
    }
    
    if (failedSheets.length > 0) {
      console.log('   ‚ö†Ô∏è √âvitez les feuilles qui √©chouent');
      console.log('   üîç V√©rifiez les noms des feuilles probl√©matiques');
    }

    // 7. Test de synchronisation avec la meilleure feuille
    if (successfulSheets.length > 0) {
      const bestSheet = successfulSheets[0];
      console.log(`\nüîÑ Test de synchronisation avec la meilleure feuille: "${bestSheet.name}"`);
      
      try {
        // Mettre √† jour temporairement la configuration
        await sheetsService.setActiveConfig(config._id);
        
        const syncResult = await sheetsService.forceSyncOrders();
        console.log('‚úÖ Synchronisation r√©ussie');
        console.log(`   Nouvelles commandes: ${syncResult.created}`);
        console.log(`   Commandes mises √† jour: ${syncResult.updated}`);
        console.log(`   Total trait√©: ${syncResult.total}`);
        
      } catch (syncError) {
        console.log('‚ùå √âchec de la synchronisation:', syncError.message);
      }
    }

    console.log('\nüéâ Tests universels termin√©s !');
    console.log('üí° Votre application peut maintenant g√©rer n\'importe quelle feuille !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests universels:', error);
    console.error('Stack:', error.stack);
  } finally {
    try {
      await mongoose.disconnect();
      console.log('\nüîå D√©connect√© de MongoDB');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la d√©connexion MongoDB');
    }
  }
}

// Ex√©cuter les tests universels
if (require.main === module) {
  testUniversalSheets();
}

module.exports = testUniversalSheets;
