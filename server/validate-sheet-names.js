require('dotenv').config();
const mongoose = require('mongoose');
const GoogleSheetsConfig = require('./models/GoogleSheetsConfig');
const sheetsService = require('./services/googleSheets');

async function validateSheetNames() {
  try {
    console.log('üîç Validation des noms de feuilles Google Sheets...\n');

    // 1. Connexion MongoDB
    console.log('1Ô∏è‚É£ Connexion √† MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ MongoDB connect√©');

    // 2. R√©cup√©rer toutes les configurations
    console.log('\n2Ô∏è‚É£ R√©cup√©ration des configurations...');
    const configs = await GoogleSheetsConfig.find();
    console.log(`üìã ${configs.length} configuration(s) trouv√©e(s)`);

    if (configs.length === 0) {
      console.log('‚ö†Ô∏è Aucune configuration trouv√©e');
      console.log('üí° Lancez d\'abord: npm run auto:fix:sync');
      return;
    }

    // 3. Valider chaque configuration
    console.log('\n3Ô∏è‚É£ Validation des noms de feuilles...');
    let hasIssues = false;

    for (const config of configs) {
      console.log(`\nüìã Configuration: ${config.name}`);
      console.log(`   Spreadsheet ID: ${config.spreadsheetId}`);
      console.log(`   Nom de feuille: "${config.sheetName}"`);
      
      // V√©rifier si le nom de feuille est probl√©matique
      const issues = [];
      if (config.sheetName.includes(' ')) {
        issues.push('Contient des espaces (n√©cessite des guillemets)');
      }
      if (config.sheetName.includes('\'') || config.sheetName.includes('"')) {
        issues.push('Contient des guillemets (peut causer des erreurs)');
      }
      if (/^[0-9]/.test(config.sheetName)) {
        issues.push('Commence par un chiffre (n√©cessite des guillemets)');
      }
      if (/[^\w\s]/.test(config.sheetName)) {
        issues.push('Contient des caract√®res sp√©ciaux');
      }

      if (issues.length > 0) {
        hasIssues = true;
        console.log(`   ‚ö†Ô∏è Probl√®mes d√©tect√©s:`);
        issues.forEach(issue => console.log(`      - ${issue}`));
        
        // Sugg√©rer un nom corrig√©
        const correctedName = suggestCorrectedName(config.sheetName);
        console.log(`   üí° Nom sugg√©r√©: "${correctedName}"`);
        
        // Demander confirmation pour la correction
        if (process.argv.includes('--auto-fix')) {
          console.log(`   üîß Correction automatique...`);
          try {
            await GoogleSheetsConfig.findByIdAndUpdate(config._id, {
              sheetName: correctedName
            });
            console.log(`   ‚úÖ Nom corrig√© vers: "${correctedName}"`);
          } catch (error) {
            console.log(`   ‚ùå Erreur lors de la correction: ${error.message}`);
          }
        }
      } else {
        console.log(`   ‚úÖ Nom de feuille valide`);
      }
    }

    // 4. Test de connexion et validation
    console.log('\n4Ô∏è‚É£ Test de connexion Google Sheets...');
    try {
      await sheetsService.initialize();
      console.log('‚úÖ Service Google Sheets initialis√©');
      
      // Tester la configuration active
      const activeConfig = configs.find(c => c.isActive);
      if (activeConfig) {
        console.log(`\nüîç Test de la configuration active: ${activeConfig.name}`);
        
        try {
          const testResult = await sheetsService.testAccess(
            activeConfig.spreadsheetId, 
            activeConfig.sheetName
          );
          
          if (testResult.success) {
            console.log('‚úÖ Configuration active valide');
            console.log(`   Spreadsheet: ${testResult.spreadsheetTitle}`);
            console.log(`   Feuilles disponibles: ${testResult.availableSheets.join(', ')}`);
          }
        } catch (testError) {
          console.log('‚ùå Erreur lors du test:', testError.message);
        }
      }
      
    } catch (error) {
      console.log('‚ùå Erreur lors de l\'initialisation:', error.message);
    }

    // 5. R√©sum√© et recommandations
    console.log('\nüìã R√©sum√© de la validation:');
    if (hasIssues) {
      console.log('   ‚ö†Ô∏è Probl√®mes d√©tect√©s dans les noms de feuilles');
      console.log('\nüí° Recommandations:');
      console.log('   1. Corrigez les noms de feuilles probl√©matiques');
      console.log('   2. Utilisez des noms simples sans espaces ni caract√®res sp√©ciaux');
      console.log('   3. Exemples de noms valides: "Feuille1", "Commandes", "Sheet1"');
      console.log('   4. Relancez ce script avec --auto-fix pour corriger automatiquement');
    } else {
      console.log('   ‚úÖ Tous les noms de feuilles sont valides');
    }

    console.log('\nüéâ Validation termin√©e !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors de la validation:', error);
  } finally {
    try {
      await mongoose.disconnect();
      console.log('\nüîå D√©connect√© de MongoDB');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la d√©connexion MongoDB');
    }
  }
}

function suggestCorrectedName(originalName) {
  if (!originalName) return 'Sheet1';
  
  // Remplacer les espaces par des underscores
  let corrected = originalName.replace(/\s+/g, '_');
  
  // Remplacer les caract√®res sp√©ciaux
  corrected = corrected.replace(/[^\w_]/g, '');
  
  // S'assurer que √ßa ne commence pas par un chiffre
  if (/^[0-9]/.test(corrected)) {
    corrected = 'Sheet_' + corrected;
  }
  
  // S'assurer que le nom n'est pas vide
  if (!corrected || corrected.length === 0) {
    corrected = 'Sheet1';
  }
  
  return corrected;
}

// Ex√©cuter la validation
if (require.main === module) {
  validateSheetNames();
}

module.exports = validateSheetNames;
