require('dotenv').config();
const mongoose = require('mongoose');
const sheetsService = require('./services/googleSheets');

async function checkPermissions() {
  try {
    console.log('üîê V√©rification des permissions Google Sheets...\n');

    // 1. Affichage des informations du compte de service
    console.log('1Ô∏è‚É£ Informations du compte de service...');
    console.log(`   Client Email: ${process.env.GOOGLE_SHEETS_CLIENT_EMAIL || 'NON D√âFINI'}`);
    console.log(`   Project ID: ${process.env.GOOGLE_SHEETS_PROJECT_ID || 'NON D√âFINI'}`);
    console.log(`   Private Key: ${process.env.GOOGLE_SHEETS_PRIVATE_KEY ? 'D√âFINI' : 'NON D√âFINI'}`);
    
    if (!process.env.GOOGLE_SHEETS_CLIENT_EMAIL) {
      console.log('‚ùå GOOGLE_SHEETS_CLIENT_EMAIL manquant dans .env');
      return;
    }

    // 2. Connexion MongoDB
    console.log('\n2Ô∏è‚É£ Test de connexion MongoDB...');
    try {
      await mongoose.connect(process.env.MONGODB_URI);
      console.log('‚úÖ MongoDB connect√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur connexion MongoDB:', error.message);
      return;
    }

    // 3. Initialisation du service
    console.log('\n3Ô∏è‚É£ Initialisation du service Google Sheets...');
    try {
      await sheetsService.initialize();
      console.log('‚úÖ Service Google Sheets initialis√©');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation:', error.message);
      console.log('\nüí° Solutions possibles:');
      console.log('   1. V√©rifiez que GOOGLE_SHEETS_PRIVATE_KEY est correct');
      console.log('   2. V√©rifiez que GOOGLE_SHEETS_PROJECT_ID est correct');
      console.log('   3. V√©rifiez que le compte de service est activ√©');
      return;
    }

    // 4. R√©cup√©ration de la configuration active
    console.log('\n4Ô∏è‚É£ R√©cup√©ration de la configuration active...');
    let config;
    try {
      config = await sheetsService.getCurrentConfig();
      console.log(`‚úÖ Configuration active: ${config.name}`);
      console.log(`   Spreadsheet ID: ${config.spreadsheetId}`);
      console.log(`   Nom de feuille: "${config.sheetName}"`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la configuration:', error.message);
      return;
    }

    // 5. Test d'acc√®s au spreadsheet
    console.log('\n5Ô∏è‚É£ Test d\'acc√®s au spreadsheet...');
    try {
      const accessResult = await sheetsService.testAccess(config.spreadsheetId, config.sheetName);
      console.log('‚úÖ Acc√®s au spreadsheet r√©ussi');
      console.log(`   Titre: ${accessResult.spreadsheetTitle}`);
      console.log(`   Feuilles disponibles: ${accessResult.availableSheets.join(', ')}`);
      console.log(`   Feuille configur√©e existe: ${accessResult.sheetExists ? 'OUI' : 'NON'}`);
      
      if (!accessResult.sheetExists) {
        console.log('\n‚ö†Ô∏è ATTENTION: La feuille configur√©e n\'existe pas !');
        console.log(`   Feuille configur√©e: "${config.sheetName}"`);
        console.log(`   Feuilles disponibles: ${accessResult.availableSheets.join(', ')}`);
        
        // Sugg√©rer des corrections
        if (accessResult.availableSheets.length > 0) {
          console.log('\nüí° Solutions:');
          console.log('   1. Utilisez une des feuilles disponibles');
          console.log('   2. Ou cr√©ez une nouvelle feuille avec le nom configur√©');
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors du test d\'acc√®s:', error.message);
      
      if (error.message.includes('Acc√®s refus√©')) {
        console.log('\nüö® PROBL√àME IDENTIFI√â: Acc√®s refus√© au Google Sheet !');
        console.log('\nüí° SOLUTIONS √âTAPE PAR √âTAPE:');
        console.log('\n   1. V√©rifiez l\'email du compte de service:');
        console.log(`      ${process.env.GOOGLE_SHEETS_CLIENT_EMAIL}`);
        
        console.log('\n   2. Allez dans votre Google Sheet et:');
        console.log('      - Cliquez sur "Partager" (en haut √† droite)');
        console.log('      - Ajoutez cet email:');
        console.log(`      ${process.env.GOOGLE_SHEETS_CLIENT_EMAIL}`);
        console.log('      - Donnez les permissions "√âditeur"');
        console.log('      - D√©cochez "Notifier les personnes"');
        console.log('      - Cliquez sur "Partager"');
        
        console.log('\n   3. V√©rifiez que l\'email appara√Æt dans la liste');
        console.log('\n   4. Relancez ce script apr√®s avoir partag√©');
        
        console.log('\n   5. Si le probl√®me persiste, v√©rifiez que:');
        console.log('      - Le compte de service est activ√© dans Google Cloud Console');
        console.log('      - L\'API Google Sheets est activ√©e');
        console.log('      - Les permissions sont bien "√âditeur" (pas "Lecteur")');
      }
      return;
    }

    // 6. Test de lecture de la feuille
    console.log('\n6Ô∏è‚É£ Test de lecture de la feuille...');
    try {
      const data = await sheetsService.getData(config.spreadsheetId, config.sheetName);
      console.log(`‚úÖ Lecture de la feuille r√©ussie: ${data.length} lignes`);
      
      if (data.length > 0) {
        console.log('   Premi√®re ligne (en-t√™tes):', data[0]);
        if (data.length > 1) {
          console.log('   Deuxi√®me ligne (donn√©es):', data[1]);
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la lecture:', error.message);
      return;
    }

    // 7. Test de synchronisation
    console.log('\n7Ô∏è‚É£ Test de synchronisation...');
    try {
      const syncResult = await sheetsService.forceSyncOrders();
      console.log('‚úÖ Synchronisation r√©ussie');
      console.log(`   Nouvelles commandes: ${syncResult.created}`);
      console.log(`   Commandes mises √† jour: ${syncResult.updated}`);
      console.log(`   Total trait√©: ${syncResult.total}`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la synchronisation:', error.message);
      return;
    }

    // 8. R√©sum√© et recommandations
    console.log('\nüìã R√©sum√© de la v√©rification des permissions:');
    console.log('   - MongoDB: ‚úÖ');
    console.log('   - Service Google Sheets: ‚úÖ');
    console.log('   - Configuration active: ‚úÖ');
    console.log('   - Acc√®s au spreadsheet: ‚úÖ');
    console.log('   - Lecture de la feuille: ‚úÖ');
    console.log('   - Synchronisation: ‚úÖ');

    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !');
    console.log('üí° Votre configuration Google Sheets fonctionne parfaitement.');

  } catch (error) {
    console.error('\n‚ùå Erreur lors de la v√©rification:', error);
    console.error('Stack:', error.stack);
  } finally {
    try {
      await mongoose.disconnect();
      console.log('\nüîå D√©connect√© de MongoDB');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la d√©connexion MongoDB');
    }
  }
}

// Ex√©cuter la v√©rification
if (require.main === module) {
  checkPermissions();
}

module.exports = checkPermissions;
