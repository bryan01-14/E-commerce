require('dotenv').config();
const mongoose = require('mongoose');
const GoogleSheetsConfig = require('./models/GoogleSheetsConfig');

async function testConfigUpdate() {
  try {
    console.log('üß™ Test de mise √† jour de la configuration active...\n');

    // 1. Connexion MongoDB
    console.log('1Ô∏è‚É£ Connexion MongoDB...');
    try {
      await mongoose.connect(process.env.MONGODB_URI);
      console.log('‚úÖ MongoDB connect√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur connexion MongoDB:', error.message);
      return;
    }

    // 2. R√©cup√©ration de toutes les configurations
    console.log('\n2Ô∏è‚É£ R√©cup√©ration de toutes les configurations...');
    const allConfigs = await GoogleSheetsConfig.find().sort({ createdAt: -1 });
    console.log(`‚úÖ ${allConfigs.length} configurations trouv√©es`);

    if (allConfigs.length === 0) {
      console.log('‚ö†Ô∏è Aucune configuration trouv√©e. Cr√©ez d\'abord des configurations.');
      return;
    }

    // 3. Affichage de la configuration actuellement active
    console.log('\n3Ô∏è‚É£ Configuration actuellement active...');
    const activeConfig = await GoogleSheetsConfig.findOne({ isActive: true });
    
    if (activeConfig) {
      console.log(`‚úÖ Configuration active: ${activeConfig.name}`);
      console.log(`   Spreadsheet ID: ${activeConfig.spreadsheetId}`);
      console.log(`   Nom de feuille: "${activeConfig.sheetName}"`);
      console.log(`   isActive: ${activeConfig.isActive}`);
    } else {
      console.log('‚ö†Ô∏è Aucune configuration active trouv√©e');
    }

    // 4. Test de changement de configuration active
    console.log('\n4Ô∏è‚É£ Test de changement de configuration active...');
    
    if (allConfigs.length >= 2) {
      // Trouver une configuration non active
      const inactiveConfig = allConfigs.find(config => !config.isActive);
      
      if (inactiveConfig) {
        console.log(`üîÑ Activation de la configuration: ${inactiveConfig.name}`);
        
        // D√©sactiver toutes les configurations
        await GoogleSheetsConfig.updateMany({}, { isActive: false });
        console.log('‚úÖ Toutes les configurations d√©sactiv√©es');
        
        // Activer la nouvelle configuration
        const updatedConfig = await GoogleSheetsConfig.findByIdAndUpdate(
          inactiveConfig._id,
          { isActive: true, lastUsed: new Date() },
          { new: true }
        );
        console.log(`‚úÖ Configuration activ√©e: ${updatedConfig.name}`);
        console.log(`   isActive: ${updatedConfig.isActive}`);
        
        // V√©rifier qu'il n'y a qu'une seule configuration active
        const activeConfigs = await GoogleSheetsConfig.find({ isActive: true });
        console.log(`‚úÖ Nombre de configurations actives: ${activeConfigs.length}`);
        
        if (activeConfigs.length === 1) {
          console.log('‚úÖ Test r√©ussi : Une seule configuration active');
        } else {
          console.log('‚ùå Test √©chou√© : Plusieurs configurations actives');
        }
        
      } else {
        console.log('‚ö†Ô∏è Toutes les configurations sont d√©j√† actives');
      }
    } else {
      console.log('‚ö†Ô∏è Pas assez de configurations pour tester le changement');
    }

    // 5. Affichage final de toutes les configurations
    console.log('\n5Ô∏è‚É£ √âtat final de toutes les configurations...');
    const finalConfigs = await GoogleSheetsConfig.find().sort({ createdAt: -1 });
    
    finalConfigs.forEach((config, index) => {
      console.log(`${index + 1}. ${config.name}`);
      console.log(`   Spreadsheet ID: ${config.spreadsheetId}`);
      console.log(`   Nom de feuille: "${config.sheetName}"`);
      console.log(`   isActive: ${config.isActive}`);
      console.log(`   Cr√©√©e le: ${config.createdAt.toLocaleDateString('fr-FR')}`);
      console.log('');
    });

    console.log('üéâ Test de mise √† jour de configuration termin√© !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors du test:', error);
    console.error('Stack:', error.stack);
  } finally {
    try {
      await mongoose.disconnect();
      console.log('\nüîå D√©connect√© de MongoDB');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la d√©connexion MongoDB');
    }
  }
}

// Ex√©cuter le test
if (require.main === module) {
  testConfigUpdate();
}

module.exports = testConfigUpdate;
