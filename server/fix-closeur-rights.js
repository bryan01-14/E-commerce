require('dotenv').config();
const mongoose = require('mongoose');
const User = require('./models/User');

async function fixCloseurRights() {
  try {
    console.log('üîß V√©rification et correction des droits des closeurs...\n');

    // 1. Connexion MongoDB
    console.log('1Ô∏è‚É£ Connexion MongoDB...');
    try {
      await mongoose.connect(process.env.MONGODB_URI);
      console.log('‚úÖ MongoDB connect√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur connexion MongoDB:', error.message);
      return;
    }

    // 2. V√©rifier les closeurs existants
    console.log('\n2Ô∏è‚É£ V√©rification des closeurs existants...');
    const closeurs = await User.find({ role: 'closeur' }).select('-password').lean();
    
    console.log(`   ${closeurs.length} closeur(s) trouv√©(s)`);
    
    if (closeurs.length === 0) {
      console.log('‚ö†Ô∏è Aucun closeur trouv√©');
      console.log('üí° Cr√©ez des utilisateurs avec le r√¥le "closeur"');
    } else {
      closeurs.forEach((closeur, index) => {
        console.log(`   ${index + 1}. ${closeur.prenom} ${closeur.nom} (${closeur.email})`);
        console.log(`      - R√¥le: ${closeur.role}`);
        console.log(`      - Actif: ${closeur.isActive ? 'Oui' : 'Non'}`);
        console.log(`      - Boutique: ${closeur.boutique || 'Non d√©finie'}`);
      });
    }

    // 3. V√©rifier les droits dans les routes
    console.log('\n3Ô∏è‚É£ V√©rification des droits dans les routes...');
    
    const routesWithCloseurAccess = [
      'GET /api/orders/google-sheets/data - ‚úÖ Closeurs autoris√©s',
      'POST /api/orders/assign-from-sheets - ‚úÖ Closeurs autoris√©s',
      'GET /api/orders/assigned - ‚úÖ Closeurs autoris√©s',
      'GET /api/orders - ‚úÖ Closeurs autoris√©s',
      'GET /api/orders/stats/overview - ‚úÖ Closeurs autoris√©s',
      'PUT /api/orders/:id/status - ‚úÖ Closeurs autoris√©s'
    ];
    
    console.log('   Routes avec acc√®s closeur:');
    routesWithCloseurAccess.forEach(route => {
      console.log(`   - ${route}`);
    });

    // 4. V√©rifier les utilisateurs administrateurs
    console.log('\n4Ô∏è‚É£ V√©rification des administrateurs...');
    const admins = await User.find({ role: 'admin' }).select('-password').lean();
    
    console.log(`   ${admins.length} administrateur(s) trouv√©(s)`);
    
    if (admins.length === 0) {
      console.log('‚ö†Ô∏è Aucun administrateur trouv√©');
      console.log('üí° Cr√©ez un administrateur pour acc√©der √† la page de surveillance');
    } else {
      admins.forEach((admin, index) => {
        console.log(`   ${index + 1}. ${admin.prenom} ${admin.nom} (${admin.email})`);
        console.log(`      - R√¥le: ${admin.role}`);
        console.log(`      - Actif: ${admin.isActive ? 'Oui' : 'Non'}`);
      });
    }

    // 5. Recommandations
    console.log('\n5Ô∏è‚É£ Recommandations...');
    
    console.log('‚úÖ Les closeurs ont d√©j√† les droits d\'assigner des commandes');
    console.log('   - Ils peuvent voir les commandes');
    console.log('   - Ils peuvent assigner des commandes aux livreurs');
    console.log('   - Ils peuvent modifier le statut des commandes');
    
    if (admins.length === 0) {
      console.log('\n‚ùå Probl√®me: Aucun administrateur pour acc√©der √† la surveillance');
      console.log('üí° Solution: Cr√©ez un administrateur avec:');
      console.log('   npm run create:admin');
    } else {
      console.log('\n‚úÖ Administrateurs disponibles pour la surveillance');
      console.log('üí° Pour tester la page de surveillance:');
      console.log('   1. Connectez-vous avec un compte administrateur');
      console.log('   2. V√©rifiez que le r√¥le est bien "admin"');
      console.log('   3. Le menu "Surveillance Activit√©s" devrait appara√Ætre');
    }

    // 6. V√©rifier la structure de navigation attendue
    console.log('\n6Ô∏è‚É£ Structure de navigation attendue...');
    
    console.log('   Pour les closeurs:');
    console.log('   - Tableau de bord');
    console.log('   - Attribuer Commandes ‚úÖ');
    console.log('   - Param√®tres');
    
    console.log('\n   Pour les administrateurs:');
    console.log('   - Tableau de bord');
    console.log('   - Attribuer Commandes ‚úÖ');
    console.log('   - Utilisateurs ‚úÖ');
    console.log('   - Surveillance Activit√©s ‚úÖ');
    console.log('   - Total des commandes ‚úÖ');
    console.log('   - Config Google Sheets ‚úÖ');
    console.log('   - Param√®tres');

    console.log('\nüéâ V√©rification termin√©e !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors de la v√©rification:', error);
    console.error('Stack:', error.stack);
  } finally {
    try {
      await mongoose.disconnect();
      console.log('\nüîå D√©connect√© de MongoDB');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la d√©connexion MongoDB');
    }
  }
}

// Ex√©cuter la v√©rification
if (require.main === module) {
  fixCloseurRights();
}

module.exports = fixCloseurRights;
