require('dotenv').config();
const mongoose = require('mongoose');
const GoogleSheetsConfig = require('./models/GoogleSheetsConfig');

async function autoFixSync() {
  try {
    console.log('üîß Correction automatique de l\'erreur de synchronisation...\n');

    // 1. Connexion MongoDB
    console.log('1Ô∏è‚É£ Connexion √† MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ MongoDB connect√©');

    // 2. V√©rifier et cr√©er la collection si n√©cessaire
    console.log('\n2Ô∏è‚É£ V√©rification de la structure de la base...');
    const db = mongoose.connection.db;
    const collections = await db.listCollections().toArray();
    
    if (!collections.some(c => c.name === 'googleSheetsConfigs')) {
      console.log('‚ö†Ô∏è Collection googleSheetsConfigs manquante, cr√©ation...');
      
      // Cr√©er la collection en ins√©rant un document
      await db.createCollection('googleSheetsConfigs');
      console.log('‚úÖ Collection googleSheetsConfigs cr√©√©e');
    } else {
      console.log('‚úÖ Collection googleSheetsConfigs existe');
    }

    // 3. V√©rifier les configurations existantes
    console.log('\n3Ô∏è‚É£ V√©rification des configurations...');
    let configs = await GoogleSheetsConfig.find();
    console.log(`üìã ${configs.length} configuration(s) trouv√©e(s)`);

    // 4. Cr√©er une configuration par d√©faut si aucune n'existe
    if (configs.length === 0) {
      console.log('‚ö†Ô∏è Aucune configuration trouv√©e, cr√©ation d\'une configuration par d√©faut...');
      
      const defaultConfig = new GoogleSheetsConfig({
        name: 'Configuration par d√©faut',
        spreadsheetId: process.env.GOOGLE_SHEETS_SPREADSHEET_ID || "128tqEErdDvs7cWwtSbRl69aRj2cHaBFlebPBDjHmDQ",
        sheetName: process.env.GOOGLE_SHEETS_SHEET_NAME || 'Feuille 1',
        description: 'Configuration cr√©√©e automatiquement lors de la correction',
        isActive: true,
        createdBy: null
      });

      await defaultConfig.save();
      console.log('‚úÖ Configuration par d√©faut cr√©√©e');
      configs = [defaultConfig];
    }

    // 5. S'assurer qu'il y a une configuration active
    const activeConfig = configs.find(c => c.isActive);
    if (!activeConfig) {
      console.log('‚ö†Ô∏è Aucune configuration active, activation de la premi√®re...');
      
      if (configs.length > 0) {
        await GoogleSheetsConfig.findByIdAndUpdate(configs[0]._id, { isActive: true });
        console.log('‚úÖ Configuration activ√©e:', configs[0].name);
      }
    } else {
      console.log('‚úÖ Configuration active trouv√©e:', activeConfig.name);
    }

    // 6. V√©rifier les variables d'environnement
    console.log('\n4Ô∏è‚É£ V√©rification des variables d\'environnement...');
    const requiredVars = [
      'GOOGLE_SHEETS_PRIVATE_KEY',
      'GOOGLE_SHEETS_CLIENT_EMAIL',
      'GOOGLE_SHEETS_PROJECT_ID'
    ];

    let missingVars = [];
    requiredVars.forEach(varName => {
      if (!process.env[varName]) {
        missingVars.push(varName);
        console.log(`‚ùå ${varName}: MANQUANT`);
      } else {
        console.log(`‚úÖ ${varName}: D√âFINI`);
      }
    });

    if (missingVars.length > 0) {
      console.log('\nüö® Variables manquantes d√©tect√©es !');
      console.log('üí° Ajoutez ces variables √† votre fichier .env:');
      missingVars.forEach(varName => {
        switch (varName) {
          case 'GOOGLE_SHEETS_PRIVATE_KEY':
            console.log(`${varName}="-----BEGIN PRIVATE KEY-----\\nVotre cl√© priv√©e\\n-----END PRIVATE KEY-----\\n"`);
            break;
          case 'GOOGLE_SHEETS_CLIENT_EMAIL':
            console.log(`${varName}=votre_email@project.iam.gserviceaccount.com`);
            break;
          case 'GOOGLE_SHEETS_PROJECT_ID':
            console.log(`${varName}=votre_project_id`);
            break;
          default:
            console.log(`${varName}=votre_valeur`);
        }
      });
    } else {
      console.log('‚úÖ Toutes les variables requises sont d√©finies');
    }

    // 7. R√©sum√© et recommandations
    console.log('\nüìã R√©sum√© de la correction:');
    console.log('   - Base de donn√©es: ‚úÖ');
    console.log('   - Collection googleSheetsConfigs: ‚úÖ');
    console.log('   - Configuration active: ‚úÖ');
    console.log('   - Variables d\'environnement: ' + (missingVars.length === 0 ? '‚úÖ' : '‚ö†Ô∏è'));

    if (missingVars.length === 0) {
      console.log('\nüéâ Tous les probl√®mes ont √©t√© corrig√©s !');
      console.log('üí° Prochaines √©tapes:');
      console.log('   1. Red√©marrez votre serveur');
      console.log('   2. Testez la synchronisation via l\'interface');
    } else {
      console.log('\n‚ö†Ô∏è Certains probl√®mes persistent');
      console.log('üí° Configurez les variables manquantes puis red√©marrez le serveur');
    }

  } catch (error) {
    console.error('\n‚ùå Erreur lors de la correction automatique:', error);
    console.error('Stack:', error.stack);
  } finally {
    try {
      await mongoose.disconnect();
      console.log('\nüîå D√©connect√© de MongoDB');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la d√©connexion MongoDB');
    }
  }
}

// Ex√©cuter la correction automatique
if (require.main === module) {
  autoFixSync();
}

module.exports = autoFixSync;
