require('dotenv').config();
const mongoose = require('mongoose');
const GoogleSheetsConfig = require('./models/GoogleSheetsConfig');
const sheetsService = require('./services/googleSheets');

async function testGoogleSheetsConfig() {
  try {
    console.log('üß™ Test de la configuration Google Sheets...\n');

    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // 1. Test de cr√©ation d'une configuration
    console.log('\n1Ô∏è‚É£ Test de cr√©ation de configuration...');
    const testConfig = new GoogleSheetsConfig({
      name: 'Configuration de test',
      spreadsheetId: process.env.GOOGLE_SHEETS_SPREADSHEET_ID || 'test-id',
      sheetName: 'Test Sheet',
      description: 'Configuration de test pour validation',
      isActive: false,
      createdBy: null
    });

    await testConfig.save();
    console.log('‚úÖ Configuration de test cr√©√©e:', testConfig.name);

    // 2. Test de r√©cup√©ration des configurations
    console.log('\n2Ô∏è‚É£ Test de r√©cup√©ration des configurations...');
    const configs = await GoogleSheetsConfig.find();
    console.log(`‚úÖ ${configs.length} configuration(s) trouv√©e(s)`);
    configs.forEach(config => {
      console.log(`   - ${config.name} (${config.isActive ? 'ACTIVE' : 'inactive'})`);
    });

    // 3. Test du service Google Sheets
    console.log('\n3Ô∏è‚É£ Test du service Google Sheets...');
    try {
      await sheetsService.initialize();
      console.log('‚úÖ Service Google Sheets initialis√©');

      const currentConfig = await sheetsService.getCurrentConfig();
      console.log('‚úÖ Configuration actuelle r√©cup√©r√©e:', currentConfig.name);

      // Test d'acc√®s (si les credentials sont configur√©s)
      if (process.env.GOOGLE_SHEETS_PRIVATE_KEY) {
        console.log('\n4Ô∏è‚É£ Test d\'acc√®s au spreadsheet...');
        const testResult = await sheetsService.testAccess();
        console.log('‚úÖ Test d\'acc√®s r√©ussi');
        console.log(`   Spreadsheet: ${testResult.spreadsheetTitle}`);
        console.log(`   Feuilles disponibles: ${testResult.availableSheets.join(', ')}`);
      } else {
        console.log('\n‚ö†Ô∏è  Credentials Google Sheets non configur√©s, test d\'acc√®s ignor√©');
      }

    } catch (error) {
      console.log('‚ö†Ô∏è  Erreur lors du test du service:', error.message);
    }

    // 5. Nettoyage
    console.log('\n5Ô∏è‚É£ Nettoyage...');
    await GoogleSheetsConfig.findByIdAndDelete(testConfig._id);
    console.log('‚úÖ Configuration de test supprim√©e');

    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !');
    console.log('\nüìã R√©sum√©:');
    console.log('   - Mod√®le GoogleSheetsConfig: ‚úÖ');
    console.log('   - Service Google Sheets: ‚úÖ');
    console.log('   - Base de donn√©es: ‚úÖ');
    console.log('   - Configuration dynamique: ‚úÖ');

  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests:', error);
    console.error('Stack:', error.stack);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå D√©connect√© de MongoDB');
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  testGoogleSheetsConfig();
}

module.exports = testGoogleSheetsConfig;
