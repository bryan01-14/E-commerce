require('dotenv').config();
const mongoose = require('mongoose');
const sheetsService = require('./services/googleSheets');

async function testAnySheet() {
  try {
    console.log('üß™ Test de n\'importe quel nom de feuille Google Sheets...\n');

    // 1. Connexion MongoDB
    console.log('1Ô∏è‚É£ Connexion √† MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ MongoDB connect√©');

    // 2. Initialisation du service
    console.log('\n2Ô∏è‚É£ Initialisation du service Google Sheets...');
    await sheetsService.initialize();
    console.log('‚úÖ Service initialis√©');

    // 3. R√©cup√©ration de la configuration active
    console.log('\n3Ô∏è‚É£ R√©cup√©ration de la configuration active...');
    const config = await sheetsService.getCurrentConfig();
    if (!config) {
      throw new Error('Aucune configuration active trouv√©e');
    }
    console.log(`üìã Configuration active: ${config.name}`);
    console.log(`   Spreadsheet ID: ${config.spreadsheetId}`);

    // 4. Test avec diff√©rents noms de feuilles
    console.log('\n4Ô∏è‚É£ Test avec diff√©rents noms de feuilles...');
    
    const testSheetNames = [
      'Feuille 1',
      'Feuille 2', 
      'Feuille-3',
      '1_Commande',
      'Commandes',
      'Sheet1',
      'Feuille avec espaces',
      'Feuille-avec-tirets',
      'Feuille_avec_underscores',
      'Feuille avec caract√®res sp√©ciaux !@#'
    ];

    for (const sheetName of testSheetNames) {
      console.log(`\nüîç Test de la feuille: "${sheetName}"`);
      
      try {
        // Test d'acc√®s
        const accessResult = await sheetsService.testAccess(config.spreadsheetId, sheetName);
        console.log(`   ‚úÖ Acc√®s r√©ussi`);
        
        // Test de lecture
        const data = await sheetsService.getData(config.spreadsheetId, sheetName);
        console.log(`   üìñ Lecture r√©ussie: ${data.length} lignes`);
        
      } catch (error) {
        console.log(`   ‚ùå √âchec: ${error.message}`);
        
        // Diagnostic d√©taill√©
        if (error.message.includes('Unable to parse range')) {
          console.log(`      üîç Diagnostic: Probl√®me de parsing du range`);
          console.log(`      üìù Range test√©: '${sheetName}'!A:Z`);
          console.log(`      üí° Solution: V√©rifiez le nom de la feuille dans Google Sheets`);
        } else if (error.message.includes('Acc√®s refus√©')) {
          console.log(`      üîç Diagnostic: Probl√®me de permissions`);
          console.log(`      üí° Solution: V√©rifiez les permissions du compte de service`);
        } else if (error.message.includes('Impossible de lire')) {
          console.log(`      üîç Diagnostic: Probl√®me de lecture`);
          console.log(`      üí° Solution: V√©rifiez que la feuille existe et contient des donn√©es`);
        }
      }
    }

    // 5. Test de synchronisation avec la configuration active
    console.log('\n5Ô∏è‚É£ Test de synchronisation avec la configuration active...');
    try {
      const syncResult = await sheetsService.forceSyncOrders();
      console.log('‚úÖ Synchronisation r√©ussie');
      console.log(`   Nouvelles commandes: ${syncResult.created}`);
      console.log(`   Commandes mises √† jour: ${syncResult.updated}`);
      console.log(`   Total trait√©: ${syncResult.total}`);
    } catch (error) {
      console.log('‚ùå √âchec de la synchronisation:', error.message);
    }

    // 6. R√©sum√© et recommandations
    console.log('\nüìã R√©sum√© des tests:');
    console.log('   - Service Google Sheets: ‚úÖ');
    console.log('   - Configuration active: ‚úÖ');
    console.log('   - Tests de feuilles: Termin√©s');
    console.log('   - Synchronisation: Test√©e');

    console.log('\nüí° Recommandations:');
    console.log('   1. Utilisez des noms de feuilles simples sans caract√®res sp√©ciaux');
    console.log('   2. √âvitez les espaces au d√©but et √† la fin des noms');
    console.log('   3. Testez toujours l\'acc√®s avant de synchroniser');
    console.log('   4. V√©rifiez les permissions du compte de service');

    console.log('\nüéâ Tests termin√©s !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests:', error);
    console.error('Stack:', error.stack);
  } finally {
    try {
      await mongoose.disconnect();
      console.log('\nüîå D√©connect√© de MongoDB');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la d√©connexion MongoDB');
    }
  }
}

// Ex√©cuter les tests
if (require.main === module) {
  testAnySheet();
}

module.exports = testAnySheet;
