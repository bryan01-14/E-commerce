require('dotenv').config();
const mongoose = require('mongoose');
const User = require('./models/User');

async function testAdminAccess() {
  try {
    console.log('üîç Diagnostic de l\'acc√®s administrateur...\n');

    // 1. Connexion MongoDB
    console.log('1Ô∏è‚É£ Connexion MongoDB...');
    try {
      await mongoose.connect(process.env.MONGODB_URI);
      console.log('‚úÖ MongoDB connect√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur connexion MongoDB:', error.message);
      return;
    }

    // 2. V√©rifier les utilisateurs administrateurs
    console.log('\n2Ô∏è‚É£ V√©rification des utilisateurs administrateurs...');
    const adminUsers = await User.find({ role: 'admin' }).select('-password').lean();
    
    console.log(`   ${adminUsers.length} utilisateur(s) administrateur trouv√©(s)`);
    
    if (adminUsers.length === 0) {
      console.log('‚ö†Ô∏è Aucun utilisateur administrateur trouv√©');
      console.log('üí° Cr√©ez un utilisateur avec le r√¥le "admin"');
    } else {
      adminUsers.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.prenom} ${user.nom} (${user.email})`);
        console.log(`      - R√¥le: ${user.role}`);
        console.log(`      - Actif: ${user.isActive ? 'Oui' : 'Non'}`);
        console.log(`      - Derni√®re connexion: ${user.derniereConnexion || 'Jamais'}`);
      });
    }

    // 3. V√©rifier tous les utilisateurs
    console.log('\n3Ô∏è‚É£ V√©rification de tous les utilisateurs...');
    const allUsers = await User.find({}).select('-password').lean();
    
    console.log(`   ${allUsers.length} utilisateur(s) total`);
    
    const roleCounts = {};
    allUsers.forEach(user => {
      roleCounts[user.role] = (roleCounts[user.role] || 0) + 1;
    });
    
    Object.entries(roleCounts).forEach(([role, count]) => {
      console.log(`   - ${role}: ${count} utilisateur(s)`);
    });

    // 4. V√©rifier la structure de la navigation
    console.log('\n4Ô∏è‚É£ Structure de navigation attendue pour admin...');
    const expectedNavigation = [
      'Tableau de bord',
      'Attribuer Commandes',
      'Utilisateurs',
      'Surveillance Activit√©s',
      'Total des commandes',
      'Config Google Sheets',
      'Param√®tres'
    ];
    
    console.log('   Navigation attendue pour admin:');
    expectedNavigation.forEach((item, index) => {
      console.log(`   ${index + 1}. ${item}`);
    });

    // 5. Recommandations
    console.log('\n5Ô∏è‚É£ Recommandations...');
    
    if (adminUsers.length === 0) {
      console.log('‚ùå Probl√®me: Aucun utilisateur administrateur');
      console.log('üí° Solution: Cr√©ez un utilisateur avec le r√¥le "admin"');
      console.log('   Exemple:');
      console.log('   - Nom: Admin');
      console.log('   - Email: admin@example.com');
      console.log('   - R√¥le: admin');
    } else {
      console.log('‚úÖ Utilisateurs administrateurs trouv√©s');
      
      const inactiveAdmins = adminUsers.filter(user => !user.isActive);
      if (inactiveAdmins.length > 0) {
        console.log('‚ö†Ô∏è Attention: Des administrateurs sont inactifs');
        inactiveAdmins.forEach(user => {
          console.log(`   - ${user.prenom} ${user.nom} (${user.email})`);
        });
      }
      
      console.log('üí° Pour tester:');
      console.log('   1. Connectez-vous avec un compte administrateur');
      console.log('   2. V√©rifiez que le r√¥le est bien "admin"');
      console.log('   3. V√©rifiez que l\'utilisateur est actif');
      console.log('   4. Rechargez la page si n√©cessaire');
    }

    // 6. V√©rifier les routes
    console.log('\n6Ô∏è‚É£ V√©rification des routes...');
    const routes = [
      '/dashboard',
      '/orders',
      '/users',
      '/admin-activity',
      '/google-sheets',
      '/google-sheets-config',
      '/settings'
    ];
    
    console.log('   Routes attendues:');
    routes.forEach(route => {
      console.log(`   - ${route}`);
    });

    console.log('\nüéâ Diagnostic termin√© !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors du diagnostic:', error);
    console.error('Stack:', error.stack);
  } finally {
    try {
      await mongoose.disconnect();
      console.log('\nüîå D√©connect√© de MongoDB');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la d√©connexion MongoDB');
    }
  }
}

// Ex√©cuter le diagnostic
if (require.main === module) {
  testAdminAccess();
}

module.exports = testAdminAccess;
