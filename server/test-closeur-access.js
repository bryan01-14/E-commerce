require('dotenv').config();
const mongoose = require('mongoose');
const User = require('./models/User');
const bcrypt = require('bcryptjs');

async function testCloseurAccess() {
  try {
    console.log('üß™ Test de l\'acc√®s des closeurs aux routes utilisateurs...\n');

    // 1. Connexion MongoDB
    console.log('1Ô∏è‚É£ Connexion MongoDB...');
    try {
      await mongoose.connect(process.env.MONGODB_URI);
      console.log('‚úÖ MongoDB connect√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur connexion MongoDB:', error.message);
      return;
    }

    // 2. V√©rifier les closeurs existants
    console.log('\n2Ô∏è‚É£ V√©rification des closeurs existants...');
    const closeurs = await User.find({ role: 'closeur' }).select('-password').lean();
    
    console.log(`   ${closeurs.length} closeur(s) trouv√©(s)`);
    
    if (closeurs.length === 0) {
      console.log('‚ö†Ô∏è Aucun closeur trouv√©');
      console.log('üí° Cr√©ez des utilisateurs avec le r√¥le "closeur"');
    } else {
      closeurs.forEach((closeur, index) => {
        console.log(`   ${index + 1}. ${closeur.prenom} ${closeur.nom} (${closeur.email})`);
        console.log(`      - R√¥le: ${closeur.role}`);
        console.log(`      - Actif: ${closeur.isActive ? 'Oui' : 'Non'}`);
        console.log(`      - Boutique: ${closeur.boutique || 'Non d√©finie'}`);
      });
    }

    // 3. V√©rifier les livreurs existants
    console.log('\n3Ô∏è‚É£ V√©rification des livreurs existants...');
    const livreurs = await User.find({ role: 'livreur' }).select('-password').lean();
    
    console.log(`   ${livreurs.length} livreur(s) trouv√©(s)`);
    
    if (livreurs.length === 0) {
      console.log('‚ö†Ô∏è Aucun livreur trouv√©');
      console.log('üí° Cr√©ez des utilisateurs avec le r√¥le "livreur"');
    } else {
      livreurs.slice(0, 3).forEach((livreur, index) => {
        console.log(`   ${index + 1}. ${livreur.prenom} ${livreur.nom} (${livreur.email})`);
        console.log(`      - R√¥le: ${livreur.role}`);
        console.log(`      - Actif: ${livreur.isActive ? 'Oui' : 'Non'}`);
      });
    }

    // 4. V√©rifier les routes accessibles aux closeurs
    console.log('\n4Ô∏è‚É£ Routes accessibles aux closeurs...');
    
    const routesWithCloseurAccess = [
      'GET /api/users - ‚úÖ Closeurs autoris√©s (pour voir les livreurs)',
      'GET /api/users?role=livreur&actif=true - ‚úÖ Closeurs autoris√©s',
      'GET /api/users/:id - ‚úÖ Closeurs autoris√©s (pour les livreurs uniquement)',
      'POST /api/users - ‚úÖ Closeurs autoris√©s (pour cr√©er des livreurs uniquement)',
      'GET /api/orders - ‚úÖ Closeurs autoris√©s',
      'POST /api/orders/assign-from-sheets - ‚úÖ Closeurs autoris√©s',
      'PUT /api/orders/:id/status - ‚úÖ Closeurs autoris√©s'
    ];
    
    console.log('   Routes avec acc√®s closeur:');
    routesWithCloseurAccess.forEach(route => {
      console.log(`   - ${route}`);
    });

    // 5. V√©rifier les restrictions pour les closeurs
    console.log('\n5Ô∏è‚É£ Restrictions pour les closeurs...');
    
    const closeurRestrictions = [
      '‚ùå Ne peuvent pas cr√©er d\'administrateurs',
      '‚ùå Ne peuvent pas cr√©er d\'autres closeurs',
      '‚ùå Ne peuvent voir que les livreurs (pas les admins/closeurs)',
      '‚ùå Ne peuvent pas modifier les administrateurs',
      '‚ùå Ne peuvent pas supprimer des utilisateurs',
      '‚úÖ Peuvent cr√©er des livreurs',
      '‚úÖ Peuvent voir tous les livreurs',
      '‚úÖ Peuvent assigner des commandes aux livreurs'
    ];
    
    console.log('   Restrictions et permissions:');
    closeurRestrictions.forEach(restriction => {
      console.log(`   - ${restriction}`);
    });

    // 6. Recommandations
    console.log('\n6Ô∏è‚É£ Recommandations...');
    
    if (closeurs.length === 0) {
      console.log('‚ùå Probl√®me: Aucun closeur trouv√©');
      console.log('üí° Solution: Cr√©ez des utilisateurs avec le r√¥le "closeur"');
    } else {
      console.log('‚úÖ Closeurs trouv√©s');
    }
    
    if (livreurs.length === 0) {
      console.log('‚ùå Probl√®me: Aucun livreur trouv√©');
      console.log('üí° Solution: Cr√©ez des utilisateurs avec le r√¥le "livreur"');
      console.log('   Les closeurs peuvent cr√©er des livreurs via l\'interface');
    } else {
      console.log('‚úÖ Livreurs trouv√©s');
    }

    console.log('\nüí° Pour tester l\'interface closeur:');
    console.log('   1. Connectez-vous avec un compte closeur');
    console.log('   2. Allez dans "Attribuer Commandes"');
    console.log('   3. V√©rifiez que vous pouvez voir les livreurs');
    console.log('   4. V√©rifiez que vous pouvez assigner des commandes');

    console.log('\nüéâ Test termin√© !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors du test:', error);
    console.error('Stack:', error.stack);
  } finally {
    try {
      await mongoose.disconnect();
      console.log('\nüîå D√©connect√© de MongoDB');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la d√©connexion MongoDB');
    }
  }
}

// Ex√©cuter le test
if (require.main === module) {
  testCloseurAccess();
}

module.exports = testCloseurAccess;
