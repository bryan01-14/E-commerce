require('dotenv').config();
const mongoose = require('mongoose');
const sheetsService = require('./services/googleSheets');

async function diagnoseSheetIssue() {
  try {
    console.log('üîç Diagnostic sp√©cifique des probl√®mes de feuilles Google Sheets...\n');

    // 1. Connexion MongoDB
    console.log('1Ô∏è‚É£ Test de connexion MongoDB...');
    try {
      await mongoose.connect(process.env.MONGODB_URI);
      console.log('‚úÖ MongoDB connect√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur connexion MongoDB:', error.message);
      return;
    }

    // 2. Initialisation du service
    console.log('\n2Ô∏è‚É£ Initialisation du service Google Sheets...');
    try {
      await sheetsService.initialize();
      console.log('‚úÖ Service Google Sheets initialis√©');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation:', error.message);
      return;
    }

    // 3. R√©cup√©ration de la configuration active
    console.log('\n3Ô∏è‚É£ R√©cup√©ration de la configuration active...');
    let config;
    try {
      config = await sheetsService.getCurrentConfig();
      console.log(`‚úÖ Configuration active: ${config.name}`);
      console.log(`   Spreadsheet ID: ${config.spreadsheetId}`);
      console.log(`   Nom de feuille: "${config.sheetName}"`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la configuration:', error.message);
      return;
    }

    // 4. Test d'acc√®s au spreadsheet
    console.log('\n4Ô∏è‚É£ Test d\'acc√®s au spreadsheet...');
    try {
      const accessResult = await sheetsService.testAccess(config.spreadsheetId, config.sheetName);
      console.log('‚úÖ Acc√®s au spreadsheet r√©ussi');
      console.log(`   Titre: ${accessResult.spreadsheetTitle}`);
      console.log(`   Feuilles disponibles: ${accessResult.availableSheets.join(', ')}`);
      
      // V√©rifier si la feuille configur√©e existe
      if (accessResult.sheetExists) {
        console.log(`‚úÖ La feuille "${config.sheetName}" existe dans le spreadsheet`);
      } else {
        console.log(`‚ùå La feuille "${config.sheetName}" N'EXISTE PAS dans le spreadsheet`);
        console.log(`üí° Feuilles disponibles: ${accessResult.availableSheets.join(', ')}`);
        
        // Sugg√©rer des corrections
        const similarSheets = accessResult.availableSheets.filter(name => 
          name.toLowerCase().includes(config.sheetName.toLowerCase()) ||
          config.sheetName.toLowerCase().includes(name.toLowerCase())
        );
        
        if (similarSheets.length > 0) {
          console.log(`üí° Feuilles similaires trouv√©es: ${similarSheets.join(', ')}`);
        }
        
        // Sugg√©rer la correction
        if (accessResult.availableSheets.length > 0) {
          console.log(`üí° Utilisez une de ces feuilles: ${accessResult.availableSheets.join(', ')}`);
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors du test d\'acc√®s:', error.message);
      
      if (error.message.includes('n\'existe pas')) {
        console.log('\nüö® PROBL√àME IDENTIFI√â: La feuille configur√©e n\'existe pas !');
        console.log('üí° Solutions:');
        console.log('   1. V√©rifiez le nom exact de la feuille dans Google Sheets');
        console.log('   2. Mettez √† jour la configuration avec le bon nom');
        console.log('   3. Ou cr√©ez une nouvelle feuille avec le nom configur√©');
      }
      return;
    }

    // 5. Test de lecture de la feuille
    console.log('\n5Ô∏è‚É£ Test de lecture de la feuille...');
    try {
      const data = await sheetsService.getData(config.spreadsheetId, config.sheetName);
      console.log(`‚úÖ Lecture de la feuille r√©ussie: ${data.length} lignes`);
      
      if (data.length > 0) {
        console.log('   Premi√®re ligne (en-t√™tes):', data[0]);
        if (data.length > 1) {
          console.log('   Deuxi√®me ligne (donn√©es):', data[1]);
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la lecture:', error.message);
      
      if (error.message.includes('Unable to parse range')) {
        console.log('\nüö® PROBL√àME IDENTIFI√â: Erreur de parsing du range !');
        console.log('üí° Solutions:');
        console.log('   1. V√©rifiez que le nom de la feuille est correct');
        console.log('   2. √âvitez les caract√®res sp√©ciaux dans le nom');
        console.log('   3. Utilisez des noms simples');
      }
      return;
    }

    // 6. Test de synchronisation
    console.log('\n6Ô∏è‚É£ Test de synchronisation...');
    try {
      const syncResult = await sheetsService.forceSyncOrders();
      console.log('‚úÖ Synchronisation r√©ussie');
      console.log(`   Nouvelles commandes: ${syncResult.created}`);
      console.log(`   Commandes mises √† jour: ${syncResult.updated}`);
      console.log(`   Total trait√©: ${syncResult.total}`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la synchronisation:', error.message);
      return;
    }

    // 7. R√©sum√© et recommandations
    console.log('\nüìã R√©sum√© du diagnostic:');
    console.log('   - MongoDB: ‚úÖ');
    console.log('   - Service Google Sheets: ‚úÖ');
    console.log('   - Configuration active: ‚úÖ');
    console.log('   - Acc√®s au spreadsheet: ‚úÖ');
    console.log('   - Lecture de la feuille: ‚úÖ');
    console.log('   - Synchronisation: ‚úÖ');

    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !');
    console.log('üí° Votre configuration Google Sheets fonctionne parfaitement.');

  } catch (error) {
    console.error('\n‚ùå Erreur lors du diagnostic:', error);
    console.error('Stack:', error.stack);
  } finally {
    try {
      await mongoose.disconnect();
      console.log('\nüîå D√©connect√© de MongoDB');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la d√©connexion MongoDB');
    }
  }
}

// Ex√©cuter le diagnostic
if (require.main === module) {
  diagnoseSheetIssue();
}

module.exports = diagnoseSheetIssue;
