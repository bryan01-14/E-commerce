require('dotenv').config();
const mongoose = require('mongoose');
const User = require('./models/User');
const bcrypt = require('bcryptjs');

async function createAdminUser() {
  try {
    console.log('üë§ Cr√©ation d\'un utilisateur administrateur...\n');

    // 1. Connexion MongoDB
    console.log('1Ô∏è‚É£ Connexion MongoDB...');
    try {
      await mongoose.connect(process.env.MONGODB_URI);
      console.log('‚úÖ MongoDB connect√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur connexion MongoDB:', error.message);
      return;
    }

    // 2. V√©rifier si un admin existe d√©j√†
    console.log('\n2Ô∏è‚É£ V√©rification des administrateurs existants...');
    const existingAdmin = await User.findOne({ role: 'admin' });
    
    if (existingAdmin) {
      console.log('‚ö†Ô∏è Un administrateur existe d√©j√†:');
      console.log(`   - Nom: ${existingAdmin.prenom} ${existingAdmin.nom}`);
      console.log(`   - Email: ${existingAdmin.email}`);
      console.log(`   - R√¥le: ${existingAdmin.role}`);
      console.log('üí° Utilisez ce compte pour acc√©der √† la page d\'administration');
      return;
    }

    // 3. Cr√©er un nouvel administrateur
    console.log('\n3Ô∏è‚É£ Cr√©ation d\'un nouvel administrateur...');
    
    const adminData = {
      prenom: 'Admin',
      nom: 'Principal',
      email: 'admin@example.com',
      telephone: '+1234567890',
      password: 'admin123',
      role: 'admin',
      isActive: true
    };

    // Hasher le mot de passe
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(adminData.password, saltRounds);

    const newAdmin = new User({
      ...adminData,
      password: hashedPassword
    });

    await newAdmin.save();

    console.log('‚úÖ Administrateur cr√©√© avec succ√®s !');
    console.log('üìã Informations de connexion:');
    console.log(`   - Email: ${adminData.email}`);
    console.log(`   - Mot de passe: ${adminData.password}`);
    console.log(`   - R√¥le: ${adminData.role}`);
    console.log('\nüîê Connectez-vous avec ces identifiants pour acc√©der √† la page d\'administration');

    // 4. V√©rifier la cr√©ation
    console.log('\n4Ô∏è‚É£ V√©rification de la cr√©ation...');
    const createdAdmin = await User.findOne({ email: adminData.email });
    
    if (createdAdmin) {
      console.log('‚úÖ Utilisateur trouv√© en base de donn√©es');
      console.log(`   - ID: ${createdAdmin._id}`);
      console.log(`   - Nom: ${createdAdmin.prenom} ${createdAdmin.nom}`);
      console.log(`   - Email: ${createdAdmin.email}`);
      console.log(`   - R√¥le: ${createdAdmin.role}`);
      console.log(`   - Actif: ${createdAdmin.isActive ? 'Oui' : 'Non'}`);
    } else {
      console.log('‚ùå Erreur: Utilisateur non trouv√© apr√®s cr√©ation');
    }

    console.log('\nüéâ Cr√©ation termin√©e !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors de la cr√©ation:', error);
    
    if (error.code === 11000) {
      console.log('üí° Un utilisateur avec cet email existe d√©j√†');
    }
    
    console.error('Stack:', error.stack);
  } finally {
    try {
      await mongoose.disconnect();
      console.log('\nüîå D√©connect√© de MongoDB');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la d√©connexion MongoDB');
    }
  }
}

// Ex√©cuter la cr√©ation
if (require.main === module) {
  createAdminUser();
}

module.exports = createAdminUser;
