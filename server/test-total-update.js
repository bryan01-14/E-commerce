require('dotenv').config();
const mongoose = require('mongoose');
const sheetsService = require('./services/googleSheets');

async function testTotalUpdate() {
  try {
    console.log('üìä Test de mise √† jour du total des commandes lors du changement de feuille...\n');

    // 1. Connexion MongoDB
    console.log('1Ô∏è‚É£ Test de connexion MongoDB...');
    try {
      await mongoose.connect(process.env.MONGODB_URI);
      console.log('‚úÖ MongoDB connect√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur connexion MongoDB:', error.message);
      return;
    }

    // 2. Initialisation du service
    console.log('\n2Ô∏è‚É£ Initialisation du service Google Sheets...');
    try {
      await sheetsService.initialize();
      console.log('‚úÖ Service Google Sheets initialis√©');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation:', error.message);
      return;
    }

    // 3. R√©cup√©ration de la configuration active
    console.log('\n3Ô∏è‚É£ R√©cup√©ration de la configuration active...');
    let config;
    try {
      config = await sheetsService.getCurrentConfig();
      console.log(`‚úÖ Configuration active: ${config.name}`);
      console.log(`   Spreadsheet ID: ${config.spreadsheetId}`);
      console.log(`   Nom de feuille: "${config.sheetName}"`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la configuration:', error.message);
      return;
    }

    // 4. V√©rification du total actuel
    console.log('\n4Ô∏è‚É£ V√©rification du total actuel des commandes...');
    const Order = require('./models/Order');
    const initialTotal = await Order.countDocuments();
    const initialActive = await Order.countDocuments({ status: { $ne: 'livr√©' } });
    const initialDelivered = await Order.countDocuments({ status: 'livr√©' });
    
    console.log(`üìä Total initial des commandes: ${initialTotal}`);
    console.log(`   Commandes actives: ${initialActive}`);
    console.log(`   Commandes livr√©es: ${initialDelivered}`);

    // 5. Test de changement de feuille avec mise √† jour du total
    console.log('\n5Ô∏è‚É£ Test de changement de feuille avec mise √† jour du total...');
    try {
      // R√©activer la m√™me configuration pour tester la mise √† jour
      const result = await sheetsService.setActiveConfig(config._id);
      
      if (result.success) {
        console.log('‚úÖ Changement de feuille r√©ussi');
        console.log(`   Message: ${result.message}`);
        
        if (result.totalStats) {
          console.log('\nüìä Nouvelles statistiques apr√®s changement:');
          console.log(`   Total des commandes: ${result.totalStats.total}`);
          console.log(`   Commandes actives: ${result.totalStats.active}`);
          console.log(`   Commandes livr√©es: ${result.totalStats.delivered}`);
          
          // V√©rifier que le total a √©t√© mis √† jour
          if (result.totalStats.total !== initialTotal) {
            console.log(`üîÑ Total mis √† jour: ${initialTotal} ‚Üí ${result.totalStats.total}`);
          } else {
            console.log('‚ÑπÔ∏è Total inchang√© (m√™me feuille)');
          }
        }
        
        if (result.syncResult) {
          console.log('\nüîÑ R√©sultats de la synchronisation:');
          console.log(`   Nouvelles commandes: ${result.syncResult.created}`);
          console.log(`   Commandes mises √† jour: ${result.syncResult.updated}`);
          console.log(`   Total trait√©: ${result.syncResult.total}`);
        }
        
      } else {
        console.log('‚ùå Changement de feuille √©chou√©');
        console.log(`   Erreur: ${result.error}`);
        if (result.suggestions) {
          console.log('üí° Suggestions:', result.suggestions.join(', '));
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors du test de changement de feuille:', error.message);
      return;
    }

    // 6. V√©rification finale du total
    console.log('\n6Ô∏è‚É£ V√©rification finale du total des commandes...');
    const finalTotal = await Order.countDocuments();
    const finalActive = await Order.countDocuments({ status: { $ne: 'livr√©' } });
    const finalDelivered = await Order.countDocuments({ status: 'livr√©' });
    
    console.log(`üìä Total final des commandes: ${finalTotal}`);
    console.log(`   Commandes actives: ${finalActive}`);
    console.log(`   Commandes livr√©es: ${finalDelivered}`);
    
    if (finalTotal !== initialTotal) {
      console.log(`‚úÖ Total mis √† jour avec succ√®s: ${initialTotal} ‚Üí ${finalTotal}`);
    } else {
      console.log('‚ÑπÔ∏è Total inchang√© (aucune nouvelle donn√©e)');
    }

    // 7. Test de lecture des donn√©es de la feuille
    console.log('\n7Ô∏è‚É£ Test de lecture des donn√©es de la feuille...');
    try {
      const data = await sheetsService.getData(config.spreadsheetId, config.sheetName);
      console.log(`üìã Donn√©es de la feuille: ${data.length} lignes`);
      
      if (data.length > 0) {
        console.log('   Premi√®re ligne (en-t√™tes):', data[0]);
        if (data.length > 1) {
          console.log('   Deuxi√®me ligne (donn√©es):', data[1]);
        }
        
        // Calculer le nombre de commandes potentielles
        const potentialOrders = data.length - 1; // -1 pour les en-t√™tes
        console.log(`üìä Commandes potentielles dans la feuille: ${potentialOrders}`);
        
        if (potentialOrders > 0 && finalTotal === 0) {
          console.log('‚ö†Ô∏è ATTENTION: Des donn√©es existent dans la feuille mais aucune commande n\'a √©t√© cr√©√©e');
          console.log('üí° V√©rifiez le format des donn√©es et les en-t√™tes de colonnes');
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la lecture des donn√©es:', error.message);
    }

    // 8. R√©sum√© et recommandations
    console.log('\nüìã R√©sum√© du test de mise √† jour du total:');
    console.log('   - Changement de feuille: ‚úÖ');
    console.log('   - Mise √† jour du total: ' + (finalTotal !== initialTotal ? '‚úÖ' : '‚ÑπÔ∏è'));
    console.log('   - Synchronisation: ‚úÖ');
    console.log('   - Donn√©es lues: ‚úÖ');

    console.log('\nüí° Recommandations:');
    if (finalTotal === 0) {
      console.log('   - V√©rifiez le format de vos donn√©es dans Google Sheets');
      console.log('   - Assurez-vous que les en-t√™tes de colonnes sont corrects');
      console.log('   - V√©rifiez que les donn√©es commencent √† partir de la ligne 2');
    } else {
      console.log('   - Le total se met √† jour correctement lors du changement de feuille');
      console.log('   - Toutes les donn√©es de la nouvelle feuille sont synchronis√©es');
    }

    console.log('\nüéâ Test de mise √† jour du total termin√© !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors du test de mise √† jour du total:', error);
    console.error('Stack:', error.stack);
  } finally {
    try {
      await mongoose.disconnect();
      console.log('\nüîå D√©connect√© de MongoDB');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la d√©connexion MongoDB');
    }
  }
}

// Ex√©cuter le test de mise √† jour du total
if (require.main === module) {
  testTotalUpdate();
}

module.exports = testTotalUpdate;
